package com.gb_e_kyc.gb_e_kyc;

import android.content.Intent;
import android.net.Uri;
import android.os.Debug;
import android.util.Log;
import android.view.WindowManager;

import androidx.annotation.NonNull;

import com.facetec.sdk.FaceTecSDK;
import com.facetec.sdk.FaceTecSessionResult;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;

import Processors.Config;
import Processors.LivenessCheckProcessor;
import Processors.NetworkingHelpers;
import Processors.Processor;
import io.flutter.embedding.android.FlutterActivity;
import io.flutter.embedding.engine.FlutterEngine;
import io.flutter.plugin.common.MethodChannel;
import okhttp3.Call;
import okhttp3.Callback;

public class MainActivity extends FlutterActivity {

    private static final String CHANNEL = "GBWallet";
    public FaceTecSessionResult latestSessionResult;
    public Processor latestProcessor;

    @Override
    public void configureFlutterEngine(@NonNull FlutterEngine flutterEngine) {
        super.configureFlutterEngine(flutterEngine);

        if (Debug.isDebuggerConnected() || Debug.waitingForDebugger()) {
            getActivity().finish();
            System.exit(0);
        }

        new MethodChannel(flutterEngine.getDartExecutor().getBinaryMessenger(), CHANNEL)
                .setMethodCallHandler((call, result) -> {
                    if (call.method.equals("getLivenessFacetec")) {
                        latestProcessor = new SetSuccessFalse();
                        onLivenessCheckPressed();
                    }
                    if (call.method.equals("getImageFacetec"))
                        result.success(latestSessionResult.getAuditTrailCompressedBase64()[0]);
                    if (call.method.equals("getResultFacetec"))
                        result.success(latestProcessor.isSuccess());
                    if (call.method.equals("DeepLinkBBL")){
                        String deepUrl = call.argument("url");
                        Intent intent = new Intent (Intent.ACTION_VIEW);
                        intent.setData (Uri.parse(deepUrl));
                        startActivityForResult(intent,0);
                    }
                });

        Config.initializeFaceTecSDKFromAutogeneratedConfig(this, new FaceTecSDK.InitializeCallback() {
            @Override
            public void onCompletion(final boolean successful) {
                if (successful) {
                    Log.e("FaceTecSDK", "Initialization Successful.");
                }else{
                    Log.e("FaceTecSDK", "Initialization Unsuccessful.");
                }
            }
        });

        FaceTecSDK.setCustomization(Config.currentCustomization);
        Config.currentCustomization.getOverlayCustomization().showBrandingImage = false;

        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE,
                WindowManager.LayoutParams.FLAG_SECURE);

    }

    // Perform Liveness Check.
    public void onLivenessCheckPressed() {
        getSessionToken(new SessionTokenCallback() {
            @Override
            public void onSessionTokenReceived(String sessionToken) {
                latestProcessor = new LivenessCheckProcessor( sessionToken,MainActivity.this);
            }
        });
    }

    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (latestProcessor == null) {
            return;
        }
    }

    public void setLatestSessionResult(FaceTecSessionResult sessionResult) {
        this.latestSessionResult = sessionResult;
    }

    interface SessionTokenCallback {
        void onSessionTokenReceived(String sessionToken);
    }

    public void getSessionToken(final SessionTokenCallback sessionTokenCallback) {

        // Do the network call and handle result
        okhttp3.Request request = new okhttp3.Request.Builder()
                .header("X-Device-Key", Config.DeviceKeyIdentifier)
                .header("User-Agent", FaceTecSDK.createFaceTecAPIUserAgentString(""))
                .url(Config.BaseURL + "/session-token")
                .get()
                .build();

        NetworkingHelpers.getApiClient().newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Call call, IOException e) {
                e.printStackTrace();
                Log.e("FaceTecSDKSampleApp", "Exception raised while attempting HTTPS call.");

                // If this comes from HTTPS cancel call, don't set the sub code to NETWORK_ERROR.
                if(!e.getMessage().equals(NetworkingHelpers.OK_HTTP_RESPONSE_CANCELED)) {
                }
            }

            @Override
            public void onResponse(Call call, okhttp3.Response response) throws IOException {
                String responseString = response.body().string();
                response.body().close();
                try {
                    JSONObject responseJSON = new JSONObject(responseString);
                    if(responseJSON.has("sessionToken")) {
                        sessionTokenCallback.onSessionTokenReceived(responseJSON.getString("sessionToken"));
                    }
                    else {
                    }
                }
                catch(JSONException e) {
                    e.printStackTrace();
                    Log.e("FaceTecSDKSampleApp", "Exception raised while attempting to parse JSON result.");
                }
            }
        });
    }

    public class SetSuccessFalse extends Processor {
        private boolean isSuccess = false;

        public boolean isSuccess() {
            return this.isSuccess;
        }
    }

}
