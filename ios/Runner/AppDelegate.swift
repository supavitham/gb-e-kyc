import UIKit
import Flutter
import FaceTecSDK
import Firebase

@UIApplicationMain
@objc class AppDelegate: FlutterAppDelegate, URLSessionDelegate {

    override init() {
        super.init()

        let url = URL(string: "https://api.gbwallet.co/register-api/users/liveness_config")!
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.allHTTPHeaderFields = [
          "Content-Type": "application/json",
          "Authorization2": "rOewM45nfCS7nYpv"
        ]
        NSURLConnection.sendAsynchronousRequest(request, queue: OperationQueue.main) {(response, data, error) in
            guard let data = data else { return }
            let json = try? JSONSerialization.jsonObject(with: data, options: [])

            if let res = json as? [String: Any] {
                if let data = res["response"] as? [String: Any] {
                    if let key = data["data"] as? [String: Any] {
                        for (key, value) in key {
                            if(key == "key"){
                                Config.productionKey = value as! String

                                // Initialize FaceTec SDK
                                Config.initializeFaceTecSDKFromAutogeneratedConfig(completion: { initializationSuccessful in
                                    print(initializationSuccessful)
                                    if(initializationSuccessful) {
                                        print("FaceTecSDK Initialization Successful.")
                                    }else {
                                        print("FaceTecSDK Initialization Unsuccessful")
                                    }
                                })
                            }
                        }
                    }
                }
            }
        }

        // Customize NFC animations
        let currentTheme = Config.wasSDKConfiguredWithConfigWizard ? "Config Wizard Theme" : "FaceTec Theme"

        FaceTec.sdk.setCustomization(Config.currentCustomization)
        Config.currentCustomization.overlayCustomization.showBrandingImage = false
    }

    override func application(
        _ application: UIApplication,
        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
    ) -> Bool {
//        if #available(iOS 10.0, *) {
//            UNUserNotificationCenter.current().delegate = self as? UNUserNotificationCenterDelegate
//        }
//        UIApplication.shared.isStatusBarHidden = false

        let facetec = SampleAppViewController()
        let METHODCHANNEL = "GBWallet"
        let controller : FlutterViewController = window?.rootViewController as! FlutterViewController
        let methodChannel = FlutterMethodChannel(name: METHODCHANNEL,
                                                  binaryMessenger: controller.binaryMessenger)
        methodChannel.setMethodCallHandler({
          (call: FlutterMethodCall, result: @escaping FlutterResult) -> Void in
            switch call.method {
                case "getLivenessFacetec":
                    guard let args = call.arguments else {
                        return
                    }
                    if let myArgs = args as? [String: Any],
                        let local = myArgs["local"] as? String {
                        FaceTec.sdk.setLanguage(local)
                    }
                    controller.addChild(facetec)
                    facetec.onLivenessCheckPressed(self)
                    result("Call Liveness")
                case "getResultFacetec":
                    result(facetec.latestProcessor.isSuccess())
                case "getImageFacetec":
                    result(facetec.latestSessionResult.auditTrailCompressedBase64![0])
                default:
                    result(FlutterMethodNotImplemented)
            }
        })
        FirebaseApp.configure()
        GeneratedPluginRegistrant.register(with: self)
        return super.application(application, didFinishLaunchingWithOptions: launchOptions)
    }

    override func applicationWillResignActive(_ application: UIApplication){
        let blurEffect = UIBlurEffect(style: UIBlurEffect.Style.dark)
        let blurEffectView = UIVisualEffectView(effect: blurEffect)
        blurEffectView.frame = window!.frame
        blurEffectView.tag = 9999

        self.window?.addSubview(blurEffectView)
    }

    override func applicationDidBecomeActive(_ application: UIApplication){
        self.window?.viewWithTag(9999)?.removeFromSuperview()
    }
}
